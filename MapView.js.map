{"version":3,"sources":["_src/MapView.js"],"names":[],"mappingsfile":"MapView.js","sourcesContent":["// define([\n//     'dijit/Destroyable',\n//\n//     'dojo/aspect',\n//     'dojo/dom',\n//     'dojo/dom-class',\n//     'dojo/dom-construct',\n//     'dojo/dom-geometry',\n//     'dojo/dom-style',\n//     'dojo/hash',\n//     'dojo/io-query',\n//     'dojo/on',\n//     'dojo/_base/array',\n//     'dojo/_base/declare',\n//     'dojo/_base/lang',\n//\n//     'esri/config',\n//     'esri/geometry/Extent',\n//     'esri/geometry/Point',\n//     'esri/geometry/SpatialReference',\n//     'esri/layers/support/TileInfo',\n//     'esri/layers/WebTileLayer',\n//     'esri/map',\n//\n//     'spin'\n// ], function (\n//     Destroyable,\n//     Button,\n//\n//     aspect,\n//     dom,\n//     domClass,\n//     domConstruct,\n//     domGeometry,\n//     domStyle,\n//     hash,\n//     ioQuery,\n//     on,\n//     array,\n//     declare,\n//     lang,\n//\n//     esriConfig,\n//     Extent,\n//     Point,\n//     SpatialReference,\n//     TileInfo,\n//     WebTiledLayer,\n//     esriMap,\n//\n//     Spinner\n// ) {\n//     return declare([Destroyable], {\n//         // description:\n//         //      Summary:\n//         //          Map Control with default functionality specific to State of Utah data.\n//         //      Description:\n//         //          This widget does not inherit from dijit._Widget like most of the other agrc widgets.\n//         //          It inherits from an esri control, esri.Map. Please see\n//         //          This widget automatically replaces the ESRI logo with the AGRC logo.\n//         //          It defaults to the State of Utah extent on load. You can easily make a\n//         //          loader image appear when a certain layer is drawing. See addLoaderToLayer.\n//\n//         // _layersDrawing: [private] Integer\n//         //      keeps track of layers that have draw - see addLoadingToLayer\n//         _layersDrawing: 0,\n//\n//         // _defaultExtent: esri.geometry.Extent\n//         //      set in constructor\n//         _defaultExtent: null,\n//\n//         // spinner: Object (Spinner)\n//         //      the spinner object returned by spinjs\n//         spinner: null,\n//\n//         // map: esri/Map\n//         map: null,\n//\n//         // mapView: esri/views/MapView\n//         mapView: null,\n//\n//\n//         // Parameters to constructor\n//\n//         // useDefaultBaseMap: Boolean\n//         //      If true, the map will automatically load the Lite base map\n//         //      Default: true\n//         useDefaultBaseMap: true,\n//\n//         // includeFullExtentButton: Boolean\n//         //      Controls the visibility of the full extent button below the zoom slider.\n//         //      Default: false.\n//         includeFullExtentButton: false,\n//\n//         // includeBackButton: Boolean\n//         //      Controls the visibility of the back button below the zoom slider.\n//         //      Default: false.\n//         includeBackButton: false,\n//\n//         // router: Boolean\n//         //      Toggles functionality to persist the map extent in the url.\n//         //      Default: false\n//         router: false,\n//\n//         constructor: function (mapDiv, options) {\n//             // summary:\n//             //      Constructor function for object.\n//             // mapDiv: String or DomNode\n//             //      The div that you want to put the map in.\n//             // options: Object?\n//             //      The parameters that you want to pass into the widget. Includes useDefaultBaseMap,\n//             //      defaultBaseMap, and includeFullExtentButton. All are optional.\n//             console.log('agrc.widgets.map.BaseMap::constructor', arguments);\n//\n//             if (!options) {\n//                 options = {};\n//             }\n//\n//             if (options.router) {\n//                 lang.mixin(this._params, this.initRouter());\n//             }\n//\n//             if (options.extent) {\n//                 this._defaultExtent = options.extent;\n//             } else if (options.scale && options.center) {\n//                 this._defaultExtent = {\n//                     scale: options.scale,\n//                     center: options.center\n//                 };\n//             } else {\n//                 this._defaultExtent = new Extent({\n//                     xmax: -11762120.612131765,\n//                     xmin: -13074391.513731329,\n//                     ymax: 5225035.106177688,\n//                     ymin: 4373832.359194187,\n//                     spatialReference: {\n//                         wkid: 3857\n//                     }\n//                 });\n//                 options.extent = this._defaultExtent;\n//                 options.fitExtent = true;\n//             }\n//\n//             // mixin options\n//             lang.mixin(this, options);\n//\n//             // load basemap\n//             if (this.useDefaultBaseMap) {\n//                 this.showDefaultBaseMap();\n//             }\n//\n//             // replace default link on logo\n//             esriConfig.defaults.map.logoLink = '//gis.utah.gov/';\n//\n//             // not sure if this is needed?\n//             domClass.add(mapDiv, 'mapContainer');\n//\n//             if (this.includeFullExtentButton || this.includeBackButton) {\n//                 var btns = [];\n//                 if (this.includeFullExtentButton) {\n//                     btns.push(this.buttons.full); // TODO\n//                 }\n//                 if (this.includeBackButton) {\n//                     btns.push(this.buttons.back); // TODO\n//                 }\n//             }\n//         },\n//         setDefaultExtent: function () {\n//             // summary:\n//             //      Sets the extent to the State of Utah\n//             console.log('agrc.widgets.map.BaseMap::setDefaultExtent', arguments);\n//\n//             if (this._defaultExtent.center) {\n//                 this.setScale(this._defaultExtent.scale);\n//                 return this.centerAt(this._defaultExtent.center);\n//             }\n//             return this.setExtent(this._defaultExtent, true);\n//         },\n//         showDefaultBaseMap: function () {\n//             // summary:\n//             //      Adds the UtahBaseMap-Vector map service.\n//             console.log('agrc.widgets.map.BaseMap::showDefaultBaseMap', arguments);\n//\n//             if (!this.quadWord) {\n//                 throw 'You must provide a discover.agrc.utah.gov quadWord to load the default base map!';\n//             }\n//\n//             // build basemap url\n//             var url = window.location.protocol +\n//                 '//discover.agrc.utah.gov/login/path/' + this.quadWord +\n//                 '/tiles/lite_basemap/${level}/${col}/${row}';\n//             var lyr = new WebTiledLayer(url, {\n//                 tileInfo: this._getTileInfo(),\n//                 copyright: 'AGRC'\n//             });\n//             this.addLayer(lyr);\n//         },\n//         _getTileInfo: function () {\n//             // summary:\n//             //      returns the tile info for a discover base map service\n//             // returns: TileInfo\n//             console.log('app/widgets/map/BaseMap::_getTileInfo', arguments);\n//\n//             var tilesize = 256;\n//             var earthCircumference = 40075016.685568;\n//             var inchesPerMeter = 39.37;\n//             var initialResolution = earthCircumference / tilesize;\n//\n//             var dpi = 96;\n//             var maxLevel = 19;\n//             var squared = 2;\n//             var lods = [];\n//             for (var level = 0; level <= maxLevel; level++) {\n//                 var resolution = initialResolution / Math.pow(squared, level);\n//                 var scale = resolution * dpi * inchesPerMeter;\n//                 lods.push({\n//                     level: level,\n//                     scale: scale,\n//                     resolution: resolution\n//                 });\n//             }\n//\n//             return new TileInfo({\n//                 dpi: dpi,\n//                 rows: 256,\n//                 cols: 256,\n//                 width: 256,\n//                 origin: {\n//                     x: -20037508.342787,\n//                     y: 20037508.342787\n//                 },\n//                 spatialReference: new SpatialReference(3857),\n//                 lods: lods\n//             });\n//         },\n//         addLoaderToLayer: function (lyr) {\n//             // summary:\n//             //      Wires up the loader image to display when the passed layer is drawing.\n//             // lyr: esri.Layer\n//             //      The layer that you want to work with.\n//             console.log('agrc.widgets.map.BaseMap::addLoaderToLayer', arguments);\n//\n//             var that = this;\n//\n//             function showLoading() {\n//                 // increment layersDrawing\n//                 that._layersDrawing++;\n//\n//                 that.showLoader();\n//             }\n//\n//             function hideLoading() {\n//                 // decrement layersDrawing\n//                 that._layersDrawing--;\n//\n//                 // only hide loader if all layers have finished drawing\n//                 if (that._layersDrawing <= 0) {\n//                     that.hideLoader();\n//                 }\n//             }\n//\n//             // wire layer events\n//             this.own(\n//                 aspect.before(lyr, 'onUpdateStart', showLoading),\n//                 aspect.after(lyr, 'onUpdateEnd', hideLoading)\n//             );\n//         },\n//         showLoader: function () {\n//             // summary:\n//             //      Displays the loader icon in the bottom, left-hand corner of the map\n//             console.log('agrc.widgets.map.BaseMap::showLoader', arguments);\n//\n//             var opts = {\n//                 lines: 9, // The number of lines to draw\n//                 length: 10, // The length of each line\n//                 width: 4, // The line thickness\n//                 radius: 5, // The radius of the inner circle\n//                 corners: 1, // Corner roundness (0..1)\n//                 rotate: 0, // The rotation offset\n//                 direction: 1, // 1: clockwise, -1: counterclockwise\n//                 color: '#ffffff', // #rgb or #rrggbb or array of colors\n//                 speed: 1, // Rounds per second\n//                 trail: 60, // Afterglow percentage\n//                 shadow: true, // Whether to render a shadow\n//                 hwaccel: true, // Whether to use hardware acceleration\n//                 className: 'spinner', // The CSS class to assign to the spinner\n//                 zIndex: 2e9, // The z-index (defaults to 2000000000)\n//                 top: 'auto', // Top position relative to parent in px\n//                 left: 'auto' // Left position relative to parent in px\n//             };\n//\n//             if (!this.spinner) {\n//                 this.spinner = new Spinner(opts).spin(dom.byId(this.root));\n//             } else {\n//                 if (!this.spinner.el) {\n//                     // only start if it's not already started\n//                     this.spinner.spin(dom.byId(this.root));\n//                 }\n//             }\n//         },\n//         hideLoader: function () {\n//             // summary:\n//             //      Hides the loader icon.\n//             console.log('agrc.widgets.map.BaseMap::hideLoader', arguments);\n//\n//             this.spinner.stop();\n//         },\n//     });\n// });\n"]}